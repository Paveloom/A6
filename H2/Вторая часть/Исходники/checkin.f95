module checkin ! Модуль с вспомогательной процедурой для определения числа точек, попавших в фигуру 
use rtype, only : rt ! Тип вещественных чисел, используемых в программе
implicit none

     private
     public :: rt, & ! Тип вещественных чисел, используемых в программе
             & check ! Процедура, определяющая число точек, попавших в фигуру
     contains

     ! Процедура, определяющая число точек, попавших в фигуру
     subroutine check(x_sample, y_sample, k)
          
          real(rt), dimension(:), intent(in) :: x_sample ! Выборка чисел, равномерно распределенных на [x_min, x_max)
          real(rt), dimension(:), intent(in) :: y_sample ! Выборка чисел, равномерно распределенных на [y_min, y_max)

          integer(4), intent(out) :: k ! Число точек, попавших в фигуру

          ! [ Описание условий проверки ]

          ! Прим.: предполагается, что пользователь самостоятельно указывает условия проверки
          ! в этой процедуре для выполнения конкретной задачи; общие условия для любых фигур
          ! не могут быть описаны; создание решений для классов задач также не рассматривается
          ! как цель этого учебного задания.  

          k = 0

          ! Проверка, внутри ли ограниченной фигуры:
          
          ! При x < 2 сверху и снизу ограничивает функция x = y ** 2 / 2, 
          ! при x > 2 — функция x = ( 16 - y ** 2 ) / 6, при x = 2 значения y ∈ [-2, 2],
          !
          ! или,
          !
          ! при y ∈ [-2, 2] функция x = ( 16 - y ** 2 ) / 6 ограничивает сверху, а
          ! функция x = y ** 2 / 2 — снизу.
          
          k = count( ( ( x_sample - f1(y_sample) ) .le. 1e-8) .and. ( ( f2(y_sample) - x_sample ) .le. 1e-8 ) )

     end subroutine check

     ! Функция, ограничивающая сверху 
     real(rt) elemental function f1(y)
          
          real(rt), intent(in) :: y ! Аргумент функции x = ( 16 - y ** 2 ) / 6

          f1 = (16 - y ** 2) / 6

     end function f1

     ! Функция, ограничивающая снизу 
     real(rt) elemental function f2(y)
          
          real(rt), intent(in) :: y ! Аргумент функции x = y ** 2 / 2

          f2 = y ** 2 / 2

     end function f2
     
end module checkin
