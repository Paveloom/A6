program main
use subprograms
implicit none
     
     integer(4) :: n ! Число узлов (степень полинома Лежандра)
     real(8) :: a, b ! Границы промежутка

     real(8) :: c      ! Особая точка (подынтегральная функция обращается в бесконечность)
     real(8) :: eps    ! Точность вычисления интеграла с особенностью
     real(8) :: d1, d2 ! Малые величины дельта-1 и дельта-2 (см. PDF задания)
     
     ! Корни многочлена Лежандра степени n и соответствующие им веса
     real(8), allocatable, dimension(:) :: t, w

     real(8) :: int ! Результат интегрирования

     integer(4) :: ier, i ! Вспомогательные переменные

     ! Считывание числа узлов (степени полинома Лежандра)
     read(*,'()'); read(*,*) n

     ! Считывание границ промежутка
     read(*,'(//)'); read(*,*) a; read(*,*) b

     ! Считывание особой точки (подынтегральная функция обращается в бесконечность)
     read(*,'(/)'); read(*,*) c

     ! Считывание точности вычисления интеграла с особенностью
     read(*,'(/)'); read(*,*) eps

     ! Считыване малых величин дельта-1 и дельта-2 (см. PDF задания)
     read(*,'(//)'); read(*,*) d1; read(*,*) d2
 
     ! Выделение памяти под массивы

     allocate(t(n), stat = ier)
     if (ier .ne. 0) stop 'Не удалось выделить память для массива t'

     allocate(w(n), stat = ier)
     if (ier .ne. 0) stop 'Не удалось выделить память для массива w'

     ! Считывание корней многочлена Лежандра степени n и соответствующих им весов
     read(*,'(//)'); read(*,*) (t(i), w(i), i = 1, n)

     ! Вызов процедуры для приближенного вычисления интеграла с помощью формулы Гаусса
     call gauss_quad_sp_init(n, a, b, t, w, c, eps, d1, d2, int)

     write(*,'(/, 4x, a)') 'Результат:'
     write(*,'(e26.16, /)') int

     deallocate(t, w)
     
end program main